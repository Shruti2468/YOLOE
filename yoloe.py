# -*- coding: utf-8 -*-
"""yoloe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LvqcK_ZckmR1CNu5HyUvt_l9zEkp1nan
"""

print("HI")

# If you clone this repo, please use this
# Or you can also directly install the repo by this
!pip install git+https://github.com/THU-MIG/yoloe.git#subdirectory=third_party/CLIP
!pip install git+https://github.com/THU-MIG/yoloe.git#subdirectory=third_party/ml-mobileclip

!pip install git+https://github.com/THU-MIG/yoloe.git#subdirectory=third_party/lvis-api
!pip install git+https://github.com/THU-MIG/yoloe.git

!wget https://docs-assets.developer.apple.com/ml-research/datasets/mobileclip/mobileclip_blt.pt

!pip install jupyter_bbox_widget

import base64

def encode_image(filepath):
  with open (filepath ,'rb') as f:
    image_bytes =f.read()
  encoded =str(base64.b64encode(image_bytes),'utf-8')
  return "data:image/jpeg;base64,"+encoded

SOURCE_IMAGE_PATH = "/content/source.png"
TARGET_IMAGE_PATH = "/content/target.png"
NAMES =["bee"]

from google.colab import output
output.enable_custom_widget_manager()

from jupyter_bbox_widget import BBoxWidget

widget =BBoxWidget(classes=NAMES)
widget.image = encode_image(SOURCE_IMAGE_PATH)
widget

import numpy as np

default_box=[widget.bboxes]

boxes =widget.bboxes if widget.bboxes else default_box
bboxes = np.array([
    [
        box['x'], box['y'], box['x'] + box['width'], box['y'] + box['height']
    ]for box in boxes
],dtype=np.float64)
cls= np.array([NAMES.index(box['label'])for box in boxes],dtype=np.int32)

import supervision as sv
from ultralytics import YOLOE
from PIL import Image
from ultralytics.models.yolo.yoloe.predict_vp import YOLOEVPSegPredictor


model = YOLOE("/content/yoloe-11s-seg.pt")
prompts = dict(bboxes=bboxes,cls=cls)

source_image= Image.open(SOURCE_IMAGE_PATH)
target_image= Image.open(TARGET_IMAGE_PATH)

model.predict(source_image,prompts=prompts,predictor=YOLOEVPSegPredictor,return_vpe=True)
model.set_classes(NAMES,model.predictor.vpe)
model.predictor =None

results = model.predict(target_image)
detection = sv.Detections.from_ultralytics(results[0])

annotated_image = target_image.copy()
annotated_image =sv.BoxAnnotator().annotate(scene=(annotated_image),detections=detection)
annotated_image =sv.LabelAnnotator().annotate(scene=annotated_image,detections=detection)
annotated_image